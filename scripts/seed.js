const { MongoClient, ServerApiVersion } = require('mongodb');
const bcrypt = require('bcryptjs');

// ุงุณุชุฎุฏุงู ุฑุงุจุท ุงูุงุชุตุงู ูู ุงููุชุบูุฑุงุช ุงูุจูุฆูุฉ ุฃู ุงุณุชุฎุฏุงู ุงูุฑุงุจุท ุงูููุฏู ูุจุงุดุฑุฉ
const uri = process.env.MONGODB_URI || "mongodb+srv://mr000000_db_user:zohwlq0wOWpwihaK@cluster0.wv2o5h4.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";

// ุฅูุดุงุก ุนููู MongoDB ูุน ุฎูุงุฑุงุช ุงูุงุชุตุงู
const client = new MongoClient(uri, {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true,
  }
});

async function seed() {
  try {
    console.log('๐ ุฌุงุฑู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช MongoDB Atlas...');
    
    // ุงูุงุชุตุงู ุจุงูุฎุงุฏู
    await client.connect();
    
    // ุฅุฑุณุงู ุฃูุฑ ping ููุชุฃูุฏ ูู ูุฌุงุญ ุงูุงุชุตุงู
    await client.db("admin").command({ ping: 1 });
    console.log("โ ุชู ุงูุงุชุตุงู ุจูุฌุงุญ ุจูุงุนุฏุฉ ุงูุจูุงูุงุช MongoDB Atlas!");
    
    // ุงููุตูู ุฅูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
    const db = client.db("selective-trading");
    console.log(`๐ ุชู ุงููุตูู ุฅูู ูุงุนุฏุฉ ุงูุจูุงูุงุช: ${db.databaseName}`);
    
    // ุฅูุดุงุก ุงููุฌููุนุงุช ุฅุฐุง ูู ุชูู ููุฌูุฏุฉ
    const collections = ['users', 'products', 'orders', 'favoriteOrders', 'notifications', 'settings'];
    for (const collName of collections) {
      const exists = await db.listCollections({ name: collName }).hasNext();
      if (!exists) {
        await db.createCollection(collName);
        console.log(`โ ุชู ุฅูุดุงุก ูุฌููุนุฉ: ${collName}`);
      } else {
        console.log(`โน๏ธ ูุฌููุนุฉ ${collName} ููุฌูุฏุฉ ุจุงููุนู`);
      }
    }
    
    // ุฅูุดุงุก ุงููุณุคูู ุงูุฑุฆูุณู
    const adminPhone = process.env.ADMIN_PHONE || '+966501234567';
    const usersCollection = db.collection('users');
    
    const adminExists = await usersCollection.findOne({ phone: adminPhone });
    if (!adminExists) {
      const hashedPassword = await bcrypt.hash('admin123', 10);
      await usersCollection.insertOne({
        name: 'ูุฏูุฑ ุงููุธุงู',
        phone: adminPhone,
        email: 'admin@selective-trading.com',
        password: hashedPassword,
        role: 'admin',
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date()
      });
      console.log('โ ุชู ุฅูุดุงุก ุญุณุงุจ ุงููุณุคูู ุงูุฑุฆูุณู');
    } else {
      console.log('โน๏ธ ุญุณุงุจ ุงููุณุคูู ููุฌูุฏ ุจุงููุนู');
    }
    
    // ุฅูุดุงุก ุงูููุชุฌุงุช ุงูุงูุชุฑุงุถูุฉ
    const productsCollection = db.collection('products');
    const productsCount = await productsCollection.countDocuments();
    
    if (productsCount === 0) {
      const products = [
        { name: 'ุญููุจ ููุฒ', nameEn: 'Almond Milk', price: 15, isAvailable: true, image: '/images/almond.jpg', createdAt: new Date(), updatedAt: new Date() },
        { name: 'ุญููุจ ุฌูุฒ ุงูููุฏ', nameEn: 'Coconut Milk', price: 18, isAvailable: true, image: '/images/coconut.jpg', createdAt: new Date(), updatedAt: new Date() },
        { name: 'ุญููุจ ุงูุดููุงู', nameEn: 'Oat Milk', price: 12, isAvailable: true, image: '/images/oat.jpg', createdAt: new Date(), updatedAt: new Date() },
        { name: 'ุญููุจ ุงูุตููุง', nameEn: 'Soy Milk', price: 14, isAvailable: true, image: '/images/soy.jpg', createdAt: new Date(), updatedAt: new Date() },
        { name: 'ุญููุจ ุฎุงูู ุงููุงูุชูุฒ', nameEn: 'Lactose-Free Milk', price: 16, isAvailable: true, image: '/images/lactose.jpg', createdAt: new Date(), updatedAt: new Date() },
      ];
      
      await productsCollection.insertMany(products);
      console.log('โ ุชู ุฅูุดุงุก ุงูููุชุฌุงุช ุงูุงูุชุฑุงุถูุฉ');
    } else {
      console.log('โน๏ธ ุงูููุชุฌุงุช ููุฌูุฏุฉ ุจุงููุนู');
    }
    
    // ุฅูุดุงุก ุฅุนุฏุงุฏุงุช ุงููุธุงู
    const settingsCollection = db.collection('settings');
    const settingsExist = await settingsCollection.findOne({});
    
    if (!settingsExist) {
      await settingsCollection.insertOne({
        orderEditTimeLimit: 2, // ุณุงุนุชูู
        maintenanceMode: false,
        autoArchiveOrders: 30, // 30 ููู
        notificationSound: true,
        maxFavoriteTemplates: 10,
        minOrderQuantity: 2,
        createdAt: new Date(),
        updatedAt: new Date()
      });
      console.log('โ ุชู ุฅูุดุงุก ุฅุนุฏุงุฏุงุช ุงููุธุงู');
    } else {
      console.log('โน๏ธ ุฅุนุฏุงุฏุงุช ุงููุธุงู ููุฌูุฏุฉ ุจุงููุนู');
    }
    
    console.log('โ ุชูุช ุชููุฆุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ!');
    
  } finally {
    // ุงูุชุฃูุฏ ูู ุฅุบูุงู ุงูุงุชุตุงู ุนูุฏ ุงูุงูุชูุงุก/ุญุฏูุซ ุฎุทุฃ
    await client.close();
    console.log('๐ ุชู ุฅุบูุงู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช');
  }
}

seed().catch(error => {
  console.error('โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชููุฆุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช:', error);
  process.exit(1);
});